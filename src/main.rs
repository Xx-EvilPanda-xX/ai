use std::os::unix::fs::FileExt;

use rand::Rng;
use network::Network;

mod function;
mod network;

const TRAIN_IMG_PATH: &str = "./MNIST_ORG/train-images.idx3-ubyte";
const TRAIN_LABEL_PATH: &str = "./MNIST_ORG/train-labels.idx1-ubyte";
const NUM_IMGS: u64 = 60000;
const IMG_WIDTH: u32 = 28;
const IMG_HEIGHT: u32 = 28;
const BEGIN_DATA_OFFSET: u64 = 16;

fn main() {
    // let images: Vec<_> = (0..20).map(|i| image_from_set(i)).collect(); 
    // for (i, image) in images.iter().enumerate() {
    //     image.save(format!("data{}.png", i).as_str()).expect("Failed to save training image");
    // }
    let args: Vec<_> = std::env::args().collect();

    if args.len() > 1 {
        test(&Network::new_from_save(&args[1]));
    } else {
        let mut network = Network::new(vec![1, 10, 10, 10, 1], true);

        // const INPUT_RANGE: Range<f64> = 0.0..(100.0 * std::f64::consts::PI);
        let mut out = vec![0.0; 1];

        // let inputs = [1.7462648711177131, -5.1182396222648485, -8.199365066207793, 4.846276756731555, -19.999197649173254, -2.055624449209617, -15.619542287120254, 14.83296791865753, 17.966572499568834, 11.662602148400161, 18.98780026788684, 15.028773265681181, -18.456459879314686, 11.076085595897194, 7.392317685724219, -12.499550620095707, 11.542712328795837, 2.409716354386518, 2.2910942605248934, 17.34619197056346, 17.285271097422488, 11.916772029720441, -12.925272577695548, 6.702966685657952, -7.1200588367127615, 3.628522060141954, 9.319277950387495, -2.2860461997311177, 11.991002635158871, -13.438823316407591, -17.39705577003611, -19.845505582516473, -12.662966441414394, -11.334614559031362, 17.35439221164802, -7.1052794866223845, -8.491829930184602, -1.336662852295074, -2.13915402722985, 19.912777610135194, 7.944300554921362, -12.040937879628588, -6.674944008228572, -8.83790465086693, 4.194806295042596, -5.276697311644929, 1.4185612831923606, -12.085022122663593, 5.497270997585694, -1.1339993315088321, 8.51152064613651, -17.455479517628927, 12.553328130768158, 0.5853253791616382, 17.580412107779466, 7.3135645221472245, -12.227787255635496, 7.801265460624293, 17.860136977119595, 7.743154934704222, -15.288648938238305, -8.465839308227547, 6.685456056926231, -18.02276169784477, -5.6055819053659395, -5.707354437582692, -0.4798268422971219, -14.572579443681564, 13.013452459344357, -5.575926016716384, -8.722584019650856, 0.6313240913518285, 4.086584984012411, -19.884054605792237, -18.171549078760833, 16.31673017186371, -1.5192541521785508, 14.915588747891405, -18.53451284684251, 7.919147763228828, -4.918482938075046, 0.4644467063141917, -19.217052328273194, -10.994777272636282, -10.83487984537209, -18.854679732340458, 16.398796938281194, 16.174713569621574, -3.6210638847985877, 5.0204867026064015, 19.495303432269665, -6.756624530661179, -6.853477413870355, -6.372358355720502, 8.157979462926601, 1.0075457354517425, -5.59870128146188, 4.0910093135190095, -8.246825310159265, -15.169492789888572, 15.356548021315007, 18.273346958018628, -2.217535434446969, 19.064658086595088, 17.51580260434025, 8.23484065804302, -18.370732082877392, -0.8775187489507097, 1.254831688255777, 17.542502106805188, -6.4951277223067105, -10.082733678464315, 17.723882489017832, 19.226615844262014, 5.318879709760758, -10.632557222221912, 9.779713747783035, -9.019327814671154, -18.71935142361094, 15.400685224410267, 2.554528941618372, -10.575405372303779, -10.646687530770755, -11.49527455135317, 19.542812000093463, -1.424376639585585, 7.140048156722216, -17.79708167060477, -4.884401878765061, 9.66042647734728, 6.085929027651691, -5.567318046422889, -12.328008519512101, -5.949212414673832, -13.491017999669648, 3.878294257123329, 14.320929068349997, 9.756490279628807, -7.574015829944996, 16.63101645944117, 2.7475524063232655, -13.439399183796166, -18.4237960312879, -11.141625059463811, 19.41278335010226, 7.786949201470854, -9.788746498949132, -4.89426281137435, -6.709639029360606, 15.90475188231619, -17.449272227993873, 18.596810542933028, 12.943235051666939, -5.353910528338206, -9.871181497563182, 5.084638972620148, 11.694272360036663, -17.73499928826581, -17.25368790923193, 4.042360216730749, -17.61581380727779, 5.992760116810736, 16.531064968417837, 0.3650958628955614, -6.0304114595510505, 10.549941986445734, -14.56018085961662, -5.9300284117556235, 4.920077762064821, -12.238926357528408, 11.308500607045762, -19.996371629309042, -11.297723904440824, 12.571882046458157, 10.408011034863254, 10.895262591261279, -4.058998818374517, 14.963403908604064, 16.85812853704431, 2.2773778883832634, -16.605798022752786, 11.843289662151442, -7.7151963936772905, 11.72963078295675, -8.426810701483696, -14.50132626602965, -6.4091456312552975, 17.824636773478815, -8.384443015519523, -7.980859146729147, -17.383517096636155, -13.155011251801945, -6.802048159196463, -0.3116171681202644, -10.304771968202875, 15.604442120439657, -8.338795391830738, -13.765341428714759, 16.675067517001708, 9.159787169213267, ];
        // let ideals = [1.6913209596081757, -3.8315583429988496, -3.549742180448181, 3.7446752145712057, 3.8359246180745936, -1.9663302081702336, 2.765218125562704, -2.147232356564953, -3.902937640546536, 0.8960985303420832, -3.997611300370963, -2.309796094497107, 3.980699978150973, 1.4560459397260204, 3.8472108899274526, -0.06681688654255943, 1.0125212007321138, 2.2665824757059254, 2.167860149304989, -3.7207970487407707, -3.698005076617502, 0.6467469671961528, 0.35842059064404735, 3.9779931581551886, -3.912774207541456, 3.1509574301762413, 2.9020345211248735, -2.1636160285631503, 0.5733859204073246, 0.8655515540324482, 3.739165540929556, 3.8766497696760913, 0.09658643866355258, -1.2123809744999756, -3.7237991668907116, -3.9158170952162994, -3.405571694122631, -1.3119245854944632, -2.0386363482750904, -3.85952496139377, 3.660015483049845, -0.5239229832976039, -3.9808309701028546, -3.211533818660646, 3.4671057410883215, -3.874039433579268, 1.3890123632742113, -0.4801875961200354, 3.923040393824534, -1.1188699304096168, 3.395202132082891, 3.7595179185543777, 0.013042460480510408, 0.5832386991973738, -3.800342677084302, 3.8680220458123142, -0.3381791832016169, 3.7153702248039315, -3.8782539190649095, 3.7365058859846303, 2.516943250481802, -3.419132528157804, 3.979789323100693, 3.914855208560819, -3.9427438221141498, -3.9586238812569694, -0.47867691624427394, 1.9231486023668278, -0.4461515544719167, -3.9376357682190215, -3.278936492397366, 0.628706240434838, 3.4118738240234063, 3.866970537470359, 3.9426757852191057, -3.2245372079720265, -1.482989209368272, -2.2164769265332573, 3.9875998947128015, 3.6700908248386304, -3.7694478772697217, 0.4634038039111277, 3.983130170198786, -1.531470044847933, -1.6779210304661814, 3.999996718320807, -3.272416747540503, -3.138486883484041, -3.146357654837248, 3.8023485780557027, -3.947989374222752, -3.9720146063224355, -3.9594146824354293, -3.999006062092491, 3.5686277873038357, 0.9969252286528149, -3.9415779727123224, 3.4141810704059976, -3.5276168937196912, 2.423230398628869, -2.569350253422724, -3.9585696218376887, -2.1056781655099623, -3.9942177759488935, -3.779690347931078, 3.533250959551907, 3.9713751726075026, -0.870496877964375, 1.234350839730591, -3.78834466786043, -3.9943863651127365, -2.327099704823535, -3.8426500018586, -3.9822413827672785, 3.8843261969377187, -1.859358072516937, 2.5666510395365996, -3.1001152789483113, 3.997881035700091, -2.603020868844374, 2.3843912196565746, -1.9097685233878223, -1.8468355931207994, -1.058341755193631, -3.9400747284386872, -1.3944643686040945, 3.908573677851009, 3.8623342333138155, -3.7579078373229544, 2.6569880233328282, 3.995137230614807, -3.936112553115915, -0.2382210480470224, -3.9860658609171633, 0.9164344805364935, 3.2985782977278855, -1.6988330374495226, 2.5844197769485264, -3.7935208380142926, -3.4003711551017277, 2.536536259033017, 0.8661137686954838, 3.9773624492109785, -1.3948101343050263, -3.9604123301676846, 3.7206502289704666, -2.559716499419377, -3.761274889511587, -3.9772886772955847, -2.964099347316417, 3.757393564044739, -3.992017628040516, -0.3763071341775945, -3.892540671276036, -2.4958315699834808, 3.8217752916590295, 0.8652055006711447, 3.845722498383488, 3.6858510818270607, 3.3885820952996313, 3.8112386390478186, 3.989461282044659, -3.346677355351165, 0.36458914225339684, -3.9920158302826736, 1.9321034166700641, 1.9122678397280624, -3.9844201502413754, 3.769981198030194, -0.3270786659257125, 1.2372405199730152, 3.836724752032771, -1.24748424353714, -0.005511430355081789, 2.055136790803285, 1.6229186230978232, -3.3973938572625095, -2.256120744684491, -3.51443211356043, 2.1563201729889325, 3.387022804782868, 0.7191492563763965, -3.746394114784616, 0.8306507771045933, -3.4392247291859817, 1.8603693475158345, -3.998016913476183, -3.8694094236132384, -3.4606652156266406, -3.6451134398510985, 3.734335233056044, 0.5865183254866093, -3.96639482778672, -0.3113020589027976, -2.1430132912852753, -2.754287618387001, -3.483330978586861, 1.1810975689282859, -3.4233632259156352, 3.0094625112126607, ];
        let inputs = [-5.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0];
        let ideals = [25.0, 16.0, 9.0, 4.0, 1.0, 0.0, 1.0, 4.0, 9.0, 16.0, 25.0, 36.0, 49.0, 64.0, 81.0, 100.0];
        assert_eq!(inputs.len(), ideals.len());

        // let input = vec_from_train_image(34001);
        let mut rng = rand::thread_rng();

        for _ in 0..5 {
            let mut sum_costs = 0.0;

            for i in 1..10000 {
                let idx = rng.gen_range(0..inputs.len());

                let input = [inputs[idx]];
                let ideal = [ideals[idx]];
                let debug = idx == 156;
                let (pre_cost, post_cost) = network.back_propagate(&input, &ideal, debug);

                network.compute(&input, &mut out);

                sum_costs += pre_cost;
                let average_cost = sum_costs / i as f64;
                // if i % 100 == 0 {
                    println!("propagate! pre-cost = {pre_cost}, post_cost = {post_cost}, out = {out:?}, input = {input:?}, ideal = {ideal:?}, average cost = {average_cost}");
                // }
            }
        }

        test(&network);
        network.save("network.dat");
        network::save_network_text("network.txt", &network).expect("Failed to save network to text");
    };
}

fn test(network: &Network) {
    // assert_eq!(network.get_dims(), &[1, 30, 1]);
    let mut out = vec![0.0; 1];
    let mut input = -20.0;

    while input < 20.0 {
        network.compute(&[input], &mut out);
        println!("({input}, {})", out[0]);
        input += 1.0;
    }
}

fn image_from_set(idx: u64) -> image::ImageBuffer<image::Luma<u8>, Vec<u8>> {
    assert!(idx < NUM_IMGS);
    let stream = std::fs::File::open(TRAIN_IMG_PATH).expect("Failed to open training data from file");
    let mut buf = vec![0; (IMG_WIDTH * IMG_HEIGHT) as usize];
    stream.read_exact_at(&mut buf, BEGIN_DATA_OFFSET + (idx * IMG_WIDTH as u64 * IMG_HEIGHT as u64)).expect("Failed to read training image");
    image::ImageBuffer::from_vec(IMG_WIDTH, IMG_HEIGHT, buf).expect("Failed to contruct training image")
}

fn vec_from_train_image(idx: u64) -> Vec<f64> {
    assert!(idx < NUM_IMGS);
    let stream = std::fs::File::open(TRAIN_IMG_PATH).expect("Failed to open training data from file");
    let mut buf = vec![0; (IMG_WIDTH * IMG_HEIGHT) as usize];
    stream.read_exact_at(&mut buf, BEGIN_DATA_OFFSET + (idx * IMG_WIDTH as u64 * IMG_HEIGHT as u64)).expect("Failed to read training image");
    buf.iter().map(|x| *x as f64).collect()
}