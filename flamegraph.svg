<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1062" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1045.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1045.00"> </text><svg id="frames" x="10" width="1180" total_samples="3375"><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.4148%" y="901" width="0.0296%" height="15" fill="rgb(227,0,7)" fg:x="14" fg:w="1"/><text x="0.6648%" y="911.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.03%)</title><rect x="0.4444%" y="901" width="0.0296%" height="15" fill="rgb(217,0,24)" fg:x="15" fg:w="1"/><text x="0.6944%" y="911.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.4444%" y="885" width="0.0296%" height="15" fill="rgb(221,193,54)" fg:x="15" fg:w="1"/><text x="0.6944%" y="895.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.4444%" y="869" width="0.0296%" height="15" fill="rgb(248,212,6)" fg:x="15" fg:w="1"/><text x="0.6944%" y="879.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.4444%" y="853" width="0.0296%" height="15" fill="rgb(208,68,35)" fg:x="15" fg:w="1"/><text x="0.6944%" y="863.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.15%)</title><rect x="0.3556%" y="917" width="0.1481%" height="15" fill="rgb(232,128,0)" fg:x="12" fg:w="5"/><text x="0.6056%" y="927.50"></text></g><g><title>memset (1 samples, 0.03%)</title><rect x="0.4741%" y="901" width="0.0296%" height="15" fill="rgb(207,160,47)" fg:x="16" fg:w="1"/><text x="0.7241%" y="911.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.24%)</title><rect x="0.2963%" y="933" width="0.2370%" height="15" fill="rgb(228,23,34)" fg:x="10" fg:w="8"/><text x="0.5463%" y="943.50"></text></g><g><title>__libc_early_init (1 samples, 0.03%)</title><rect x="0.5037%" y="917" width="0.0296%" height="15" fill="rgb(218,30,26)" fg:x="17" fg:w="1"/><text x="0.7537%" y="927.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="0.5037%" y="901" width="0.0296%" height="15" fill="rgb(220,122,19)" fg:x="17" fg:w="1"/><text x="0.7537%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.5037%" y="885" width="0.0296%" height="15" fill="rgb(250,228,42)" fg:x="17" fg:w="1"/><text x="0.7537%" y="895.50"></text></g><g><title>[ld-linux-x86-64.so.2] (9 samples, 0.27%)</title><rect x="0.2963%" y="949" width="0.2667%" height="15" fill="rgb(240,193,28)" fg:x="10" fg:w="9"/><text x="0.5463%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.5333%" y="933" width="0.0296%" height="15" fill="rgb(216,20,37)" fg:x="18" fg:w="1"/><text x="0.7833%" y="943.50"></text></g><g><title>[ld-linux-x86-64.so.2] (10 samples, 0.30%)</title><rect x="0.2963%" y="965" width="0.2963%" height="15" fill="rgb(206,188,39)" fg:x="10" fg:w="10"/><text x="0.5463%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.5630%" y="949" width="0.0296%" height="15" fill="rgb(217,207,13)" fg:x="19" fg:w="1"/><text x="0.8130%" y="959.50"></text></g><g><title>[ld-linux-x86-64.so.2] (22 samples, 0.65%)</title><rect x="0.0000%" y="981" width="0.6519%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="22"/><text x="0.2500%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.06%)</title><rect x="0.5926%" y="965" width="0.0593%" height="15" fill="rgb(225,20,46)" fg:x="20" fg:w="2"/><text x="0.8426%" y="975.50"></text></g><g><title>[unknown] (34 samples, 1.01%)</title><rect x="0.6519%" y="981" width="1.0074%" height="15" fill="rgb(210,31,41)" fg:x="22" fg:w="34"/><text x="0.9019%" y="991.50"></text></g><g><title>realloc (34 samples, 1.01%)</title><rect x="0.6519%" y="965" width="1.0074%" height="15" fill="rgb(221,200,47)" fg:x="22" fg:w="34"/><text x="0.9019%" y="975.50"></text></g><g><title>[libc.so.6] (34 samples, 1.01%)</title><rect x="0.6519%" y="949" width="1.0074%" height="15" fill="rgb(226,26,5)" fg:x="22" fg:w="34"/><text x="0.9019%" y="959.50"></text></g><g><title>[libc.so.6] (34 samples, 1.01%)</title><rect x="0.6519%" y="933" width="1.0074%" height="15" fill="rgb(249,33,26)" fg:x="22" fg:w="34"/><text x="0.9019%" y="943.50"></text></g><g><title>[unknown] (34 samples, 1.01%)</title><rect x="0.6519%" y="917" width="1.0074%" height="15" fill="rgb(235,183,28)" fg:x="22" fg:w="34"/><text x="0.9019%" y="927.50"></text></g><g><title>ai::image_from_set (5 samples, 0.15%)</title><rect x="1.6593%" y="709" width="0.1481%" height="15" fill="rgb(221,5,38)" fg:x="56" fg:w="5"/><text x="1.9093%" y="719.50"></text></g><g><title>alloc::vec::from_elem (5 samples, 0.15%)</title><rect x="1.6593%" y="693" width="0.1481%" height="15" fill="rgb(247,18,42)" fg:x="56" fg:w="5"/><text x="1.9093%" y="703.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (5 samples, 0.15%)</title><rect x="1.6593%" y="677" width="0.1481%" height="15" fill="rgb(241,131,45)" fg:x="56" fg:w="5"/><text x="1.9093%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (5 samples, 0.15%)</title><rect x="1.6593%" y="661" width="0.1481%" height="15" fill="rgb(249,31,29)" fg:x="56" fg:w="5"/><text x="1.9093%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (5 samples, 0.15%)</title><rect x="1.6593%" y="645" width="0.1481%" height="15" fill="rgb(225,111,53)" fg:x="56" fg:w="5"/><text x="1.9093%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (5 samples, 0.15%)</title><rect x="1.6593%" y="629" width="0.1481%" height="15" fill="rgb(238,160,17)" fg:x="56" fg:w="5"/><text x="1.9093%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.15%)</title><rect x="1.6593%" y="613" width="0.1481%" height="15" fill="rgb(214,148,48)" fg:x="56" fg:w="5"/><text x="1.9093%" y="623.50"></text></g><g><title>alloc::alloc::alloc_zeroed (5 samples, 0.15%)</title><rect x="1.6593%" y="597" width="0.1481%" height="15" fill="rgb(232,36,49)" fg:x="56" fg:w="5"/><text x="1.9093%" y="607.50"></text></g><g><title>__libc_calloc (5 samples, 0.15%)</title><rect x="1.6593%" y="581" width="0.1481%" height="15" fill="rgb(209,103,24)" fg:x="56" fg:w="5"/><text x="1.9093%" y="591.50"></text></g><g><title>[libc.so.6] (5 samples, 0.15%)</title><rect x="1.6593%" y="565" width="0.1481%" height="15" fill="rgb(229,88,8)" fg:x="56" fg:w="5"/><text x="1.9093%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="1.8074%" y="693" width="0.0296%" height="15" fill="rgb(213,181,19)" fg:x="61" fg:w="1"/><text x="2.0574%" y="703.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="1.8074%" y="677" width="0.0296%" height="15" fill="rgb(254,191,54)" fg:x="61" fg:w="1"/><text x="2.0574%" y="687.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="1.8074%" y="661" width="0.0296%" height="15" fill="rgb(241,83,37)" fg:x="61" fg:w="1"/><text x="2.0574%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 2.04%)</title><rect x="11.0815%" y="677" width="2.0444%" height="15" fill="rgb(233,36,39)" fg:x="374" fg:w="69"/><text x="11.3315%" y="687.50">&lt;..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="13.0963%" y="661" width="0.0296%" height="15" fill="rgb(226,3,54)" fg:x="442" fg:w="1"/><text x="13.3463%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (549 samples, 16.27%)</title><rect x="1.8370%" y="693" width="16.2667%" height="15" fill="rgb(245,192,40)" fg:x="62" fg:w="549"/><text x="2.0870%" y="703.50">&lt;core::slice::iter::Iter&lt;..</text></g><g><title>ai::network::Network::back_propagate::{{closure}} (168 samples, 4.98%)</title><rect x="13.1259%" y="677" width="4.9778%" height="15" fill="rgb(238,167,29)" fg:x="443" fg:w="168"/><text x="13.3759%" y="687.50">ai::ne..</text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (8 samples, 0.24%)</title><rect x="18.6963%" y="69" width="0.2370%" height="15" fill="rgb(232,182,51)" fg:x="631" fg:w="8"/><text x="18.9463%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="18.9037%" y="53" width="0.0296%" height="15" fill="rgb(231,60,39)" fg:x="638" fg:w="1"/><text x="19.1537%" y="63.50"></text></g><g><title>ai::function::Symbol::to_closure (11 samples, 0.33%)</title><rect x="19.3481%" y="53" width="0.3259%" height="15" fill="rgb(208,69,12)" fg:x="653" fg:w="11"/><text x="19.5981%" y="63.50"></text></g><g><title>ai::function::Symbol::to_closure (22 samples, 0.65%)</title><rect x="24.4148%" y="37" width="0.6519%" height="15" fill="rgb(235,93,37)" fg:x="824" fg:w="22"/><text x="24.6648%" y="47.50"></text></g><g><title>ai::function::Symbol::to_closure::{{closure}} (571 samples, 16.92%)</title><rect x="18.5481%" y="165" width="16.9185%" height="15" fill="rgb(213,116,39)" fg:x="626" fg:w="571"/><text x="18.7981%" y="175.50">ai::function::Symbol::to_c..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (571 samples, 16.92%)</title><rect x="18.5481%" y="149" width="16.9185%" height="15" fill="rgb(222,207,29)" fg:x="626" fg:w="571"/><text x="18.7981%" y="159.50">core::iter::traits::iterat..</text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (571 samples, 16.92%)</title><rect x="18.5481%" y="133" width="16.9185%" height="15" fill="rgb(206,96,30)" fg:x="626" fg:w="571"/><text x="18.7981%" y="143.50">&lt;f64 as core::iter::traits..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (571 samples, 16.92%)</title><rect x="18.5481%" y="117" width="16.9185%" height="15" fill="rgb(218,138,4)" fg:x="626" fg:w="571"/><text x="18.7981%" y="127.50">&lt;core::iter::adapters::map..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (571 samples, 16.92%)</title><rect x="18.5481%" y="101" width="16.9185%" height="15" fill="rgb(250,191,14)" fg:x="626" fg:w="571"/><text x="18.7981%" y="111.50">&lt;core::slice::iter::Iter&lt;T..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (566 samples, 16.77%)</title><rect x="18.6963%" y="85" width="16.7704%" height="15" fill="rgb(239,60,40)" fg:x="631" fg:w="566"/><text x="18.9463%" y="95.50">core::iter::adapters::map:..</text></g><g><title>ai::function::Symbol::to_closure::{{closure}}::{{closure}} (558 samples, 16.53%)</title><rect x="18.9333%" y="69" width="16.5333%" height="15" fill="rgb(206,27,48)" fg:x="639" fg:w="558"/><text x="19.1833%" y="79.50">ai::function::Symbol::to_c..</text></g><g><title>ai::function::Symbol::to_closure::{{closure}} (533 samples, 15.79%)</title><rect x="19.6741%" y="53" width="15.7926%" height="15" fill="rgb(225,35,8)" fg:x="664" fg:w="533"/><text x="19.9241%" y="63.50">ai::function::Symbol::to..</text></g><g><title>ai::function::Symbol::to_closure::{{closure}} (351 samples, 10.40%)</title><rect x="25.0667%" y="37" width="10.4000%" height="15" fill="rgb(250,213,24)" fg:x="846" fg:w="351"/><text x="25.3167%" y="47.50">ai::function::S..</text></g><g><title>ai::function::Symbol::to_closure::{{closure}} (591 samples, 17.51%)</title><rect x="18.1037%" y="309" width="17.5111%" height="15" fill="rgb(247,123,22)" fg:x="611" fg:w="591"/><text x="18.3537%" y="319.50">ai::function::Symbol::to_cl..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (591 samples, 17.51%)</title><rect x="18.1037%" y="293" width="17.5111%" height="15" fill="rgb(231,138,38)" fg:x="611" fg:w="591"/><text x="18.3537%" y="303.50">core::iter::traits::iterato..</text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (591 samples, 17.51%)</title><rect x="18.1037%" y="277" width="17.5111%" height="15" fill="rgb(231,145,46)" fg:x="611" fg:w="591"/><text x="18.3537%" y="287.50">&lt;f64 as core::iter::traits:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (591 samples, 17.51%)</title><rect x="18.1037%" y="261" width="17.5111%" height="15" fill="rgb(251,118,11)" fg:x="611" fg:w="591"/><text x="18.3537%" y="271.50">&lt;core::iter::adapters::map:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (591 samples, 17.51%)</title><rect x="18.1037%" y="245" width="17.5111%" height="15" fill="rgb(217,147,25)" fg:x="611" fg:w="591"/><text x="18.3537%" y="255.50">&lt;core::slice::iter::Iter&lt;T&gt;..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (591 samples, 17.51%)</title><rect x="18.1037%" y="229" width="17.5111%" height="15" fill="rgb(247,81,37)" fg:x="611" fg:w="591"/><text x="18.3537%" y="239.50">core::iter::adapters::map::..</text></g><g><title>ai::function::Symbol::to_closure::{{closure}}::{{closure}} (591 samples, 17.51%)</title><rect x="18.1037%" y="213" width="17.5111%" height="15" fill="rgb(209,12,38)" fg:x="611" fg:w="591"/><text x="18.3537%" y="223.50">ai::function::Symbol::to_cl..</text></g><g><title>ai::function::Symbol::to_closure::{{closure}} (591 samples, 17.51%)</title><rect x="18.1037%" y="197" width="17.5111%" height="15" fill="rgb(227,1,9)" fg:x="611" fg:w="591"/><text x="18.3537%" y="207.50">ai::function::Symbol::to_cl..</text></g><g><title>ai::function::Symbol::to_closure::{{closure}} (590 samples, 17.48%)</title><rect x="18.1333%" y="181" width="17.4815%" height="15" fill="rgb(248,47,43)" fg:x="612" fg:w="590"/><text x="18.3833%" y="191.50">ai::function::Symbol::to_cl..</text></g><g><title>std::f64::&lt;impl f64&gt;::exp (5 samples, 0.15%)</title><rect x="35.4667%" y="165" width="0.1481%" height="15" fill="rgb(221,10,30)" fg:x="1197" fg:w="5"/><text x="35.7167%" y="175.50"></text></g><g><title>exp (5 samples, 0.15%)</title><rect x="35.4667%" y="149" width="0.1481%" height="15" fill="rgb(210,229,1)" fg:x="1197" fg:w="5"/><text x="35.7167%" y="159.50"></text></g><g><title>[libm.so.6] (2 samples, 0.06%)</title><rect x="35.5556%" y="133" width="0.0593%" height="15" fill="rgb(222,148,37)" fg:x="1200" fg:w="2"/><text x="35.8056%" y="143.50"></text></g><g><title>ai::function::Symbol::to_closure::{{closure}} (592 samples, 17.54%)</title><rect x="18.1037%" y="693" width="17.5407%" height="15" fill="rgb(234,67,33)" fg:x="611" fg:w="592"/><text x="18.3537%" y="703.50">ai::function::Symbol::to_cl..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (592 samples, 17.54%)</title><rect x="18.1037%" y="677" width="17.5407%" height="15" fill="rgb(247,98,35)" fg:x="611" fg:w="592"/><text x="18.3537%" y="687.50">core::iter::traits::iterato..</text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (592 samples, 17.54%)</title><rect x="18.1037%" y="661" width="17.5407%" height="15" fill="rgb(247,138,52)" fg:x="611" fg:w="592"/><text x="18.3537%" y="671.50">&lt;f64 as core::iter::traits:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (592 samples, 17.54%)</title><rect x="18.1037%" y="645" width="17.5407%" height="15" fill="rgb(213,79,30)" fg:x="611" fg:w="592"/><text x="18.3537%" y="655.50">&lt;core::iter::adapters::map:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (592 samples, 17.54%)</title><rect x="18.1037%" y="629" width="17.5407%" height="15" fill="rgb(246,177,23)" fg:x="611" fg:w="592"/><text x="18.3537%" y="639.50">&lt;core::slice::iter::Iter&lt;T&gt;..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (592 samples, 17.54%)</title><rect x="18.1037%" y="613" width="17.5407%" height="15" fill="rgb(230,62,27)" fg:x="611" fg:w="592"/><text x="18.3537%" y="623.50">core::iter::adapters::map::..</text></g><g><title>ai::function::Symbol::to_closure::{{closure}}::{{closure}} (592 samples, 17.54%)</title><rect x="18.1037%" y="597" width="17.5407%" height="15" fill="rgb(216,154,8)" fg:x="611" fg:w="592"/><text x="18.3537%" y="607.50">ai::function::Symbol::to_cl..</text></g><g><title>ai::function::Symbol::to_closure::{{closure}} (592 samples, 17.54%)</title><rect x="18.1037%" y="581" width="17.5407%" height="15" fill="rgb(244,35,45)" fg:x="611" fg:w="592"/><text x="18.3537%" y="591.50">ai::function::Symbol::to_cl..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (592 samples, 17.54%)</title><rect x="18.1037%" y="565" width="17.5407%" height="15" fill="rgb(251,115,12)" fg:x="611" fg:w="592"/><text x="18.3537%" y="575.50">core::iter::traits::iterato..</text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (592 samples, 17.54%)</title><rect x="18.1037%" y="549" width="17.5407%" height="15" fill="rgb(240,54,50)" fg:x="611" fg:w="592"/><text x="18.3537%" y="559.50">&lt;f64 as core::iter::traits:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (592 samples, 17.54%)</title><rect x="18.1037%" y="533" width="17.5407%" height="15" fill="rgb(233,84,52)" fg:x="611" fg:w="592"/><text x="18.3537%" y="543.50">&lt;core::iter::adapters::map:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (592 samples, 17.54%)</title><rect x="18.1037%" y="517" width="17.5407%" height="15" fill="rgb(207,117,47)" fg:x="611" fg:w="592"/><text x="18.3537%" y="527.50">&lt;core::slice::iter::Iter&lt;T&gt;..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (592 samples, 17.54%)</title><rect x="18.1037%" y="501" width="17.5407%" height="15" fill="rgb(249,43,39)" fg:x="611" fg:w="592"/><text x="18.3537%" y="511.50">core::iter::adapters::map::..</text></g><g><title>ai::function::Symbol::to_closure::{{closure}}::{{closure}} (592 samples, 17.54%)</title><rect x="18.1037%" y="485" width="17.5407%" height="15" fill="rgb(209,38,44)" fg:x="611" fg:w="592"/><text x="18.3537%" y="495.50">ai::function::Symbol::to_cl..</text></g><g><title>ai::function::Symbol::to_closure::{{closure}} (592 samples, 17.54%)</title><rect x="18.1037%" y="469" width="17.5407%" height="15" fill="rgb(236,212,23)" fg:x="611" fg:w="592"/><text x="18.3537%" y="479.50">ai::function::Symbol::to_cl..</text></g><g><title>ai::function::Symbol::to_closure::{{closure}} (592 samples, 17.54%)</title><rect x="18.1037%" y="453" width="17.5407%" height="15" fill="rgb(242,79,21)" fg:x="611" fg:w="592"/><text x="18.3537%" y="463.50">ai::function::Symbol::to_cl..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (592 samples, 17.54%)</title><rect x="18.1037%" y="437" width="17.5407%" height="15" fill="rgb(211,96,35)" fg:x="611" fg:w="592"/><text x="18.3537%" y="447.50">core::iter::traits::iterato..</text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (592 samples, 17.54%)</title><rect x="18.1037%" y="421" width="17.5407%" height="15" fill="rgb(253,215,40)" fg:x="611" fg:w="592"/><text x="18.3537%" y="431.50">&lt;f64 as core::iter::traits:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (592 samples, 17.54%)</title><rect x="18.1037%" y="405" width="17.5407%" height="15" fill="rgb(211,81,21)" fg:x="611" fg:w="592"/><text x="18.3537%" y="415.50">&lt;core::iter::adapters::map:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (592 samples, 17.54%)</title><rect x="18.1037%" y="389" width="17.5407%" height="15" fill="rgb(208,190,38)" fg:x="611" fg:w="592"/><text x="18.3537%" y="399.50">&lt;core::slice::iter::Iter&lt;T&gt;..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (592 samples, 17.54%)</title><rect x="18.1037%" y="373" width="17.5407%" height="15" fill="rgb(235,213,38)" fg:x="611" fg:w="592"/><text x="18.3537%" y="383.50">core::iter::adapters::map::..</text></g><g><title>ai::function::Symbol::to_closure::{{closure}}::{{closure}} (592 samples, 17.54%)</title><rect x="18.1037%" y="357" width="17.5407%" height="15" fill="rgb(237,122,38)" fg:x="611" fg:w="592"/><text x="18.3537%" y="367.50">ai::function::Symbol::to_cl..</text></g><g><title>ai::function::Symbol::to_closure::{{closure}} (592 samples, 17.54%)</title><rect x="18.1037%" y="341" width="17.5407%" height="15" fill="rgb(244,218,35)" fg:x="611" fg:w="592"/><text x="18.3537%" y="351.50">ai::function::Symbol::to_cl..</text></g><g><title>ai::function::Symbol::to_closure::{{closure}} (592 samples, 17.54%)</title><rect x="18.1037%" y="325" width="17.5407%" height="15" fill="rgb(240,68,47)" fg:x="611" fg:w="592"/><text x="18.3537%" y="335.50">ai::function::Symbol::to_cl..</text></g><g><title>std::f64::&lt;impl f64&gt;::exp (1 samples, 0.03%)</title><rect x="35.6148%" y="309" width="0.0296%" height="15" fill="rgb(210,16,53)" fg:x="1202" fg:w="1"/><text x="35.8648%" y="319.50"></text></g><g><title>exp (1 samples, 0.03%)</title><rect x="35.6148%" y="293" width="0.0296%" height="15" fill="rgb(235,124,12)" fg:x="1202" fg:w="1"/><text x="35.8648%" y="303.50"></text></g><g><title>[libm.so.6] (1 samples, 0.03%)</title><rect x="35.6148%" y="277" width="0.0296%" height="15" fill="rgb(224,169,11)" fg:x="1202" fg:w="1"/><text x="35.8648%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.18%)</title><rect x="41.1852%" y="629" width="0.1778%" height="15" fill="rgb(250,166,2)" fg:x="1390" fg:w="6"/><text x="41.4352%" y="639.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.09%)</title><rect x="41.2741%" y="613" width="0.0889%" height="15" fill="rgb(242,216,29)" fg:x="1393" fg:w="3"/><text x="41.5241%" y="623.50"></text></g><g><title>ai::network::Network::node_function (92 samples, 2.73%)</title><rect x="41.3630%" y="629" width="2.7259%" height="15" fill="rgb(230,116,27)" fg:x="1396" fg:w="92"/><text x="41.6130%" y="639.50">ai..</text></g><g><title>__rdl_alloc (45 samples, 1.33%)</title><rect x="46.4000%" y="549" width="1.3333%" height="15" fill="rgb(228,99,48)" fg:x="1566" fg:w="45"/><text x="46.6500%" y="559.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (23 samples, 0.68%)</title><rect x="47.0519%" y="533" width="0.6815%" height="15" fill="rgb(253,11,6)" fg:x="1588" fg:w="23"/><text x="47.3019%" y="543.50"></text></g><g><title>__rust_alloc (24 samples, 0.71%)</title><rect x="47.7333%" y="549" width="0.7111%" height="15" fill="rgb(247,143,39)" fg:x="1611" fg:w="24"/><text x="47.9833%" y="559.50"></text></g><g><title>core::ptr::read_volatile (5 samples, 0.15%)</title><rect x="48.4444%" y="549" width="0.1481%" height="15" fill="rgb(236,97,10)" fg:x="1635" fg:w="5"/><text x="48.6944%" y="559.50"></text></g><g><title>[libc.so.6] (37 samples, 1.10%)</title><rect x="67.2000%" y="517" width="1.0963%" height="15" fill="rgb(233,208,19)" fg:x="2268" fg:w="37"/><text x="67.4500%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (842 samples, 24.95%)</title><rect x="44.0889%" y="629" width="24.9481%" height="15" fill="rgb(216,164,2)" fg:x="1488" fg:w="842"/><text x="44.3389%" y="639.50">alloc::boxed::Box&lt;T&gt;::new</text></g><g><title>alloc::alloc::exchange_malloc (810 samples, 24.00%)</title><rect x="45.0370%" y="613" width="24.0000%" height="15" fill="rgb(220,129,5)" fg:x="1520" fg:w="810"/><text x="45.2870%" y="623.50">alloc::alloc::exchange_malloc</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (783 samples, 23.20%)</title><rect x="45.8370%" y="597" width="23.2000%" height="15" fill="rgb(242,17,10)" fg:x="1547" fg:w="783"/><text x="46.0870%" y="607.50">&lt;alloc::alloc::Global as core::alloc:..</text></g><g><title>alloc::alloc::Global::alloc_impl (783 samples, 23.20%)</title><rect x="45.8370%" y="581" width="23.2000%" height="15" fill="rgb(242,107,0)" fg:x="1547" fg:w="783"/><text x="46.0870%" y="591.50">alloc::alloc::Global::alloc_impl</text></g><g><title>alloc::alloc::alloc (783 samples, 23.20%)</title><rect x="45.8370%" y="565" width="23.2000%" height="15" fill="rgb(251,28,31)" fg:x="1547" fg:w="783"/><text x="46.0870%" y="575.50">alloc::alloc::alloc</text></g><g><title>malloc (690 samples, 20.44%)</title><rect x="48.5926%" y="549" width="20.4444%" height="15" fill="rgb(233,223,10)" fg:x="1640" fg:w="690"/><text x="48.8426%" y="559.50">malloc</text></g><g><title>[libc.so.6] (522 samples, 15.47%)</title><rect x="53.5704%" y="533" width="15.4667%" height="15" fill="rgb(215,21,27)" fg:x="1808" fg:w="522"/><text x="53.8204%" y="543.50">[libc.so.6]</text></g><g><title>[unknown] (25 samples, 0.74%)</title><rect x="68.2963%" y="517" width="0.7407%" height="15" fill="rgb(232,23,21)" fg:x="2305" fg:w="25"/><text x="68.5463%" y="527.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.12%)</title><rect x="69.6593%" y="581" width="0.1185%" height="15" fill="rgb(244,5,23)" fg:x="2351" fg:w="4"/><text x="69.9093%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.06%)</title><rect x="69.7778%" y="581" width="0.0593%" height="15" fill="rgb(226,81,46)" fg:x="2355" fg:w="2"/><text x="70.0278%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (1 samples, 0.03%)</title><rect x="69.8074%" y="565" width="0.0296%" height="15" fill="rgb(247,70,30)" fg:x="2356" fg:w="1"/><text x="70.0574%" y="575.50"></text></g><g><title>__rdl_realloc (4 samples, 0.12%)</title><rect x="69.8667%" y="517" width="0.1185%" height="15" fill="rgb(212,68,19)" fg:x="2358" fg:w="4"/><text x="70.1167%" y="527.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.03%)</title><rect x="69.9556%" y="501" width="0.0296%" height="15" fill="rgb(240,187,13)" fg:x="2361" fg:w="1"/><text x="70.2056%" y="511.50"></text></g><g><title>__rust_realloc (3 samples, 0.09%)</title><rect x="69.9852%" y="517" width="0.0889%" height="15" fill="rgb(223,113,26)" fg:x="2362" fg:w="3"/><text x="70.2352%" y="527.50"></text></g><g><title>@plt (5 samples, 0.15%)</title><rect x="71.4963%" y="485" width="0.1481%" height="15" fill="rgb(206,192,2)" fg:x="2413" fg:w="5"/><text x="71.7463%" y="495.50"></text></g><g><title>[unknown] (7 samples, 0.21%)</title><rect x="77.6889%" y="453" width="0.2074%" height="15" fill="rgb(241,108,4)" fg:x="2622" fg:w="7"/><text x="77.9389%" y="463.50"></text></g><g><title>[libc.so.6] (42 samples, 1.24%)</title><rect x="76.9185%" y="469" width="1.2444%" height="15" fill="rgb(247,173,49)" fg:x="2596" fg:w="42"/><text x="77.1685%" y="479.50"></text></g><g><title>__default_morecore (9 samples, 0.27%)</title><rect x="77.8963%" y="453" width="0.2667%" height="15" fill="rgb(224,114,35)" fg:x="2629" fg:w="9"/><text x="78.1463%" y="463.50"></text></g><g><title>sbrk (9 samples, 0.27%)</title><rect x="77.8963%" y="437" width="0.2667%" height="15" fill="rgb(245,159,27)" fg:x="2629" fg:w="9"/><text x="78.1463%" y="447.50"></text></g><g><title>brk (6 samples, 0.18%)</title><rect x="77.9852%" y="421" width="0.1778%" height="15" fill="rgb(245,172,44)" fg:x="2632" fg:w="6"/><text x="78.2352%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.15%)</title><rect x="78.0148%" y="405" width="0.1481%" height="15" fill="rgb(236,23,11)" fg:x="2633" fg:w="5"/><text x="78.2648%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (355 samples, 10.52%)</title><rect x="69.8370%" y="565" width="10.5185%" height="15" fill="rgb(205,117,38)" fg:x="2357" fg:w="355"/><text x="70.0870%" y="575.50">&lt;alloc::alloc::..</text></g><g><title>alloc::alloc::Global::grow_impl (355 samples, 10.52%)</title><rect x="69.8370%" y="549" width="10.5185%" height="15" fill="rgb(237,72,25)" fg:x="2357" fg:w="355"/><text x="70.0870%" y="559.50">alloc::alloc::G..</text></g><g><title>alloc::alloc::realloc (355 samples, 10.52%)</title><rect x="69.8370%" y="533" width="10.5185%" height="15" fill="rgb(244,70,9)" fg:x="2357" fg:w="355"/><text x="70.0870%" y="543.50">alloc::alloc::r..</text></g><g><title>realloc (347 samples, 10.28%)</title><rect x="70.0741%" y="517" width="10.2815%" height="15" fill="rgb(217,125,39)" fg:x="2365" fg:w="347"/><text x="70.3241%" y="527.50">realloc</text></g><g><title>[libc.so.6] (322 samples, 9.54%)</title><rect x="70.8148%" y="501" width="9.5407%" height="15" fill="rgb(235,36,10)" fg:x="2390" fg:w="322"/><text x="71.0648%" y="511.50">[libc.so.6]</text></g><g><title>[libc.so.6] (294 samples, 8.71%)</title><rect x="71.6444%" y="485" width="8.7111%" height="15" fill="rgb(251,123,47)" fg:x="2418" fg:w="294"/><text x="71.8944%" y="495.50">[libc.so.6]</text></g><g><title>[unknown] (74 samples, 2.19%)</title><rect x="78.1630%" y="469" width="2.1926%" height="15" fill="rgb(221,13,13)" fg:x="2638" fg:w="74"/><text x="78.4130%" y="479.50">[..</text></g><g><title>alloc::raw_vec::finish_grow (368 samples, 10.90%)</title><rect x="69.8370%" y="581" width="10.9037%" height="15" fill="rgb(238,131,9)" fg:x="2357" fg:w="368"/><text x="70.0870%" y="591.50">alloc::raw_vec::..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (13 samples, 0.39%)</title><rect x="80.3556%" y="565" width="0.3852%" height="15" fill="rgb(211,50,8)" fg:x="2712" fg:w="13"/><text x="80.6056%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (380 samples, 11.26%)</title><rect x="69.5111%" y="613" width="11.2593%" height="15" fill="rgb(245,182,24)" fg:x="2346" fg:w="380"/><text x="69.7611%" y="623.50">alloc::raw_vec::R..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (375 samples, 11.11%)</title><rect x="69.6593%" y="597" width="11.1111%" height="15" fill="rgb(242,14,37)" fg:x="2351" fg:w="375"/><text x="69.9093%" y="607.50">alloc::raw_vec::..</text></g><g><title>core::cmp::max (1 samples, 0.03%)</title><rect x="80.7407%" y="581" width="0.0296%" height="15" fill="rgb(246,228,12)" fg:x="2725" fg:w="1"/><text x="80.9907%" y="591.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.03%)</title><rect x="80.7407%" y="565" width="0.0296%" height="15" fill="rgb(213,55,15)" fg:x="2725" fg:w="1"/><text x="80.9907%" y="575.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.03%)</title><rect x="80.7407%" y="549" width="0.0296%" height="15" fill="rgb(209,9,3)" fg:x="2725" fg:w="1"/><text x="80.9907%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (6 samples, 0.18%)</title><rect x="80.7704%" y="613" width="0.1778%" height="15" fill="rgb(230,59,30)" fg:x="2726" fg:w="6"/><text x="81.0204%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6 samples, 0.18%)</title><rect x="80.7704%" y="597" width="0.1778%" height="15" fill="rgb(209,121,21)" fg:x="2726" fg:w="6"/><text x="81.0204%" y="607.50"></text></g><g><title>core::ptr::write (112 samples, 3.32%)</title><rect x="80.9481%" y="613" width="3.3185%" height="15" fill="rgb(220,109,13)" fg:x="2732" fg:w="112"/><text x="81.1981%" y="623.50">cor..</text></g><g><title>[unknown] (12 samples, 0.36%)</title><rect x="83.9111%" y="597" width="0.3556%" height="15" fill="rgb(232,18,1)" fg:x="2832" fg:w="12"/><text x="84.1611%" y="607.50"></text></g><g><title>ai::network::Network::node_function (1,677 samples, 49.69%)</title><rect x="35.7630%" y="645" width="49.6889%" height="15" fill="rgb(215,41,42)" fg:x="1207" fg:w="1677"/><text x="36.0130%" y="655.50">ai::network::Network::node_function</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (554 samples, 16.41%)</title><rect x="69.0370%" y="629" width="16.4148%" height="15" fill="rgb(224,123,36)" fg:x="2330" fg:w="554"/><text x="69.2870%" y="639.50">alloc::vec::Vec&lt;T,A&gt;::push</text></g><g><title>malloc (40 samples, 1.19%)</title><rect x="84.2667%" y="613" width="1.1852%" height="15" fill="rgb(240,125,3)" fg:x="2844" fg:w="40"/><text x="84.5167%" y="623.50"></text></g><g><title>[libc.so.6] (40 samples, 1.19%)</title><rect x="84.2667%" y="597" width="1.1852%" height="15" fill="rgb(205,98,50)" fg:x="2844" fg:w="40"/><text x="84.5167%" y="607.50"></text></g><g><title>[unknown] (40 samples, 1.19%)</title><rect x="84.2667%" y="581" width="1.1852%" height="15" fill="rgb(205,185,37)" fg:x="2844" fg:w="40"/><text x="84.5167%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (3 samples, 0.09%)</title><rect x="85.4519%" y="645" width="0.0889%" height="15" fill="rgb(238,207,15)" fg:x="2884" fg:w="3"/><text x="85.7019%" y="655.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.09%)</title><rect x="85.4519%" y="629" width="0.0889%" height="15" fill="rgb(213,199,42)" fg:x="2884" fg:w="3"/><text x="85.7019%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.09%)</title><rect x="85.4519%" y="613" width="0.0889%" height="15" fill="rgb(235,201,11)" fg:x="2884" fg:w="3"/><text x="85.7019%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.09%)</title><rect x="85.4519%" y="597" width="0.0889%" height="15" fill="rgb(207,46,11)" fg:x="2884" fg:w="3"/><text x="85.7019%" y="607.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.09%)</title><rect x="85.4519%" y="581" width="0.0889%" height="15" fill="rgb(241,35,35)" fg:x="2884" fg:w="3"/><text x="85.7019%" y="591.50"></text></g><g><title>malloc (3 samples, 0.09%)</title><rect x="85.4519%" y="565" width="0.0889%" height="15" fill="rgb(243,32,47)" fg:x="2884" fg:w="3"/><text x="85.7019%" y="575.50"></text></g><g><title>[libc.so.6] (3 samples, 0.09%)</title><rect x="85.4519%" y="549" width="0.0889%" height="15" fill="rgb(247,202,23)" fg:x="2884" fg:w="3"/><text x="85.7019%" y="559.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="85.5111%" y="533" width="0.0296%" height="15" fill="rgb(219,102,11)" fg:x="2886" fg:w="1"/><text x="85.7611%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.09%)</title><rect x="85.5407%" y="629" width="0.0889%" height="15" fill="rgb(243,110,44)" fg:x="2887" fg:w="3"/><text x="85.7907%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.09%)</title><rect x="85.5407%" y="613" width="0.0889%" height="15" fill="rgb(222,74,54)" fg:x="2887" fg:w="3"/><text x="85.7907%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.09%)</title><rect x="85.5407%" y="597" width="0.0889%" height="15" fill="rgb(216,99,12)" fg:x="2887" fg:w="3"/><text x="85.7907%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.09%)</title><rect x="85.5407%" y="581" width="0.0889%" height="15" fill="rgb(226,22,26)" fg:x="2887" fg:w="3"/><text x="85.7907%" y="591.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.09%)</title><rect x="85.5407%" y="565" width="0.0889%" height="15" fill="rgb(217,163,10)" fg:x="2887" fg:w="3"/><text x="85.7907%" y="575.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.09%)</title><rect x="85.5407%" y="549" width="0.0889%" height="15" fill="rgb(213,25,53)" fg:x="2887" fg:w="3"/><text x="85.7907%" y="559.50"></text></g><g><title>realloc (3 samples, 0.09%)</title><rect x="85.5407%" y="533" width="0.0889%" height="15" fill="rgb(252,105,26)" fg:x="2887" fg:w="3"/><text x="85.7907%" y="543.50"></text></g><g><title>[libc.so.6] (2 samples, 0.06%)</title><rect x="85.5704%" y="517" width="0.0593%" height="15" fill="rgb(220,39,43)" fg:x="2888" fg:w="2"/><text x="85.8204%" y="527.50"></text></g><g><title>[libc.so.6] (2 samples, 0.06%)</title><rect x="85.5704%" y="501" width="0.0593%" height="15" fill="rgb(229,68,48)" fg:x="2888" fg:w="2"/><text x="85.8204%" y="511.50"></text></g><g><title>ai::network::Network::cost (1,690 samples, 50.07%)</title><rect x="35.6444%" y="693" width="50.0741%" height="15" fill="rgb(252,8,32)" fg:x="1203" fg:w="1690"/><text x="35.8944%" y="703.50">ai::network::Network::cost</text></g><g><title>ai::network::Network::node_function (1,690 samples, 50.07%)</title><rect x="35.6444%" y="677" width="50.0741%" height="15" fill="rgb(223,20,43)" fg:x="1203" fg:w="1690"/><text x="35.8944%" y="687.50">ai::network::Network::node_function</text></g><g><title>ai::network::Network::node_function (1,688 samples, 50.01%)</title><rect x="35.7037%" y="661" width="50.0148%" height="15" fill="rgb(229,81,49)" fg:x="1205" fg:w="1688"/><text x="35.9537%" y="671.50">ai::network::Network::node_function</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.18%)</title><rect x="85.5407%" y="645" width="0.1778%" height="15" fill="rgb(236,28,36)" fg:x="2887" fg:w="6"/><text x="85.7907%" y="655.50"></text></g><g><title>core::ptr::write (3 samples, 0.09%)</title><rect x="85.6296%" y="629" width="0.0889%" height="15" fill="rgb(249,185,26)" fg:x="2890" fg:w="3"/><text x="85.8796%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.03%)</title><rect x="85.7185%" y="693" width="0.0296%" height="15" fill="rgb(249,174,33)" fg:x="2893" fg:w="1"/><text x="85.9685%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="85.7185%" y="677" width="0.0296%" height="15" fill="rgb(233,201,37)" fg:x="2893" fg:w="1"/><text x="85.9685%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="85.7185%" y="661" width="0.0296%" height="15" fill="rgb(221,78,26)" fg:x="2893" fg:w="1"/><text x="85.9685%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="85.7185%" y="645" width="0.0296%" height="15" fill="rgb(250,127,30)" fg:x="2893" fg:w="1"/><text x="85.9685%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="85.7185%" y="629" width="0.0296%" height="15" fill="rgb(230,49,44)" fg:x="2893" fg:w="1"/><text x="85.9685%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.03%)</title><rect x="85.7185%" y="613" width="0.0296%" height="15" fill="rgb(229,67,23)" fg:x="2893" fg:w="1"/><text x="85.9685%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="85.7185%" y="597" width="0.0296%" height="15" fill="rgb(249,83,47)" fg:x="2893" fg:w="1"/><text x="85.9685%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="85.7185%" y="581" width="0.0296%" height="15" fill="rgb(215,43,3)" fg:x="2893" fg:w="1"/><text x="85.9685%" y="591.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (1 samples, 0.03%)</title><rect x="85.7185%" y="565" width="0.0296%" height="15" fill="rgb(238,154,13)" fg:x="2893" fg:w="1"/><text x="85.9685%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.03%)</title><rect x="85.7185%" y="549" width="0.0296%" height="15" fill="rgb(219,56,2)" fg:x="2893" fg:w="1"/><text x="85.9685%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="85.7185%" y="533" width="0.0296%" height="15" fill="rgb(233,0,4)" fg:x="2893" fg:w="1"/><text x="85.9685%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="85.7185%" y="517" width="0.0296%" height="15" fill="rgb(235,30,7)" fg:x="2893" fg:w="1"/><text x="85.9685%" y="527.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (1 samples, 0.03%)</title><rect x="85.7185%" y="501" width="0.0296%" height="15" fill="rgb(250,79,13)" fg:x="2893" fg:w="1"/><text x="85.9685%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (1 samples, 0.03%)</title><rect x="85.7185%" y="485" width="0.0296%" height="15" fill="rgb(211,146,34)" fg:x="2893" fg:w="1"/><text x="85.9685%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;ai::function::Symbol&gt; (3 samples, 0.09%)</title><rect x="85.7481%" y="213" width="0.0889%" height="15" fill="rgb(228,22,38)" fg:x="2894" fg:w="3"/><text x="85.9981%" y="223.50"></text></g><g><title>__libc_free (2 samples, 0.06%)</title><rect x="85.8963%" y="165" width="0.0593%" height="15" fill="rgb(235,168,5)" fg:x="2899" fg:w="2"/><text x="86.1463%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="85.9259%" y="149" width="0.0296%" height="15" fill="rgb(221,155,16)" fg:x="2900" fg:w="1"/><text x="86.1759%" y="159.50"></text></g><g><title>__libc_free (113 samples, 3.35%)</title><rect x="86.1630%" y="117" width="3.3481%" height="15" fill="rgb(215,215,53)" fg:x="2908" fg:w="113"/><text x="86.4130%" y="127.50">__l..</text></g><g><title>[libc.so.6] (87 samples, 2.58%)</title><rect x="86.9333%" y="101" width="2.5778%" height="15" fill="rgb(223,4,10)" fg:x="2934" fg:w="87"/><text x="87.1833%" y="111.50">[l..</text></g><g><title>__rdl_dealloc (3 samples, 0.09%)</title><rect x="89.5111%" y="117" width="0.0889%" height="15" fill="rgb(234,103,6)" fg:x="3021" fg:w="3"/><text x="89.7611%" y="127.50"></text></g><g><title>__rust_dealloc (3 samples, 0.09%)</title><rect x="89.6000%" y="117" width="0.0889%" height="15" fill="rgb(227,97,0)" fg:x="3024" fg:w="3"/><text x="89.8500%" y="127.50"></text></g><g><title>ai::network::Network::back_propagate (3,094 samples, 91.67%)</title><rect x="1.8074%" y="709" width="91.6741%" height="15" fill="rgb(234,150,53)" fg:x="61" fg:w="3094"/><text x="2.0574%" y="719.50">ai::network::Network::back_propagate</text></g><g><title>core::ptr::drop_in_place&lt;ai::function::Symbol&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="693" width="7.7333%" height="15" fill="rgb(228,201,54)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="703.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;ai::function::Function&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="677" width="7.7333%" height="15" fill="rgb(222,22,37)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="687.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;ai::function::Symbol&gt;&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="661" width="7.7333%" height="15" fill="rgb(237,53,32)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="671.50">core::ptr::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (261 samples, 7.73%)</title><rect x="85.7481%" y="645" width="7.7333%" height="15" fill="rgb(233,25,53)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="655.50">&lt;alloc::vec..</text></g><g><title>core::ptr::drop_in_place&lt;[ai::function::Symbol]&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="629" width="7.7333%" height="15" fill="rgb(210,40,34)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="639.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;ai::function::Symbol&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="613" width="7.7333%" height="15" fill="rgb(241,220,44)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="623.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;ai::function::Function&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="597" width="7.7333%" height="15" fill="rgb(235,28,35)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="607.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;ai::function::Symbol&gt;&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="581" width="7.7333%" height="15" fill="rgb(210,56,17)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="591.50">core::ptr::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (261 samples, 7.73%)</title><rect x="85.7481%" y="565" width="7.7333%" height="15" fill="rgb(224,130,29)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="575.50">&lt;alloc::vec..</text></g><g><title>core::ptr::drop_in_place&lt;[ai::function::Symbol]&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="549" width="7.7333%" height="15" fill="rgb(235,212,8)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="559.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;ai::function::Symbol&gt;&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="533" width="7.7333%" height="15" fill="rgb(223,33,50)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="543.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;ai::function::Symbol&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="517" width="7.7333%" height="15" fill="rgb(219,149,13)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="527.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;ai::function::Function&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="501" width="7.7333%" height="15" fill="rgb(250,156,29)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="511.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;ai::function::Symbol&gt;&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="485" width="7.7333%" height="15" fill="rgb(216,193,19)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="495.50">core::ptr::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (261 samples, 7.73%)</title><rect x="85.7481%" y="469" width="7.7333%" height="15" fill="rgb(216,135,14)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="479.50">&lt;alloc::vec..</text></g><g><title>core::ptr::drop_in_place&lt;[ai::function::Symbol]&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="453" width="7.7333%" height="15" fill="rgb(241,47,5)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="463.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;ai::function::Symbol&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="437" width="7.7333%" height="15" fill="rgb(233,42,35)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="447.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;ai::function::Function&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="421" width="7.7333%" height="15" fill="rgb(231,13,6)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="431.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(ai::function::Symbol,ai::function::Symbol)&gt;&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="405" width="7.7333%" height="15" fill="rgb(207,181,40)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="415.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;(ai::function::Symbol,ai::function::Symbol)&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="389" width="7.7333%" height="15" fill="rgb(254,173,49)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="399.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;ai::function::Symbol&gt;&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="373" width="7.7333%" height="15" fill="rgb(221,1,38)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="383.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;ai::function::Symbol&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="357" width="7.7333%" height="15" fill="rgb(206,124,46)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="367.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;ai::function::Function&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="341" width="7.7333%" height="15" fill="rgb(249,21,11)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="351.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;ai::function::Symbol&gt;&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="325" width="7.7333%" height="15" fill="rgb(222,201,40)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="335.50">core::ptr::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (261 samples, 7.73%)</title><rect x="85.7481%" y="309" width="7.7333%" height="15" fill="rgb(235,61,29)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="319.50">&lt;alloc::vec..</text></g><g><title>core::ptr::drop_in_place&lt;[ai::function::Symbol]&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="293" width="7.7333%" height="15" fill="rgb(219,207,3)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="303.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;ai::function::Symbol&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="277" width="7.7333%" height="15" fill="rgb(222,56,46)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="287.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;ai::function::Function&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="261" width="7.7333%" height="15" fill="rgb(239,76,54)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="271.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(ai::function::Symbol,ai::function::Symbol)&gt;&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="245" width="7.7333%" height="15" fill="rgb(231,124,27)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="255.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;(ai::function::Symbol,ai::function::Symbol)&gt; (261 samples, 7.73%)</title><rect x="85.7481%" y="229" width="7.7333%" height="15" fill="rgb(249,195,6)" fg:x="2894" fg:w="261"/><text x="85.9981%" y="239.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;ai::function::Symbol&gt;&gt; (258 samples, 7.64%)</title><rect x="85.8370%" y="213" width="7.6444%" height="15" fill="rgb(237,174,47)" fg:x="2897" fg:w="258"/><text x="86.0870%" y="223.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;ai::function::Symbol&gt; (258 samples, 7.64%)</title><rect x="85.8370%" y="197" width="7.6444%" height="15" fill="rgb(206,201,31)" fg:x="2897" fg:w="258"/><text x="86.0870%" y="207.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;ai::function::Function&gt; (256 samples, 7.59%)</title><rect x="85.8963%" y="181" width="7.5852%" height="15" fill="rgb(231,57,52)" fg:x="2899" fg:w="256"/><text x="86.1463%" y="191.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;ai::function::Symbol&gt;&gt; (254 samples, 7.53%)</title><rect x="85.9556%" y="165" width="7.5259%" height="15" fill="rgb(248,177,22)" fg:x="2901" fg:w="254"/><text x="86.2056%" y="175.50">core::ptr:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (254 samples, 7.53%)</title><rect x="85.9556%" y="149" width="7.5259%" height="15" fill="rgb(215,211,37)" fg:x="2901" fg:w="254"/><text x="86.2056%" y="159.50">&lt;alloc::ve..</text></g><g><title>core::ptr::drop_in_place&lt;[ai::function::Symbol]&gt; (254 samples, 7.53%)</title><rect x="85.9556%" y="133" width="7.5259%" height="15" fill="rgb(241,128,51)" fg:x="2901" fg:w="254"/><text x="86.2056%" y="143.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;ai::function::Symbol&gt; (128 samples, 3.79%)</title><rect x="89.6889%" y="117" width="3.7926%" height="15" fill="rgb(227,165,31)" fg:x="3027" fg:w="128"/><text x="89.9389%" y="127.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;ai::function::Function&gt; (110 samples, 3.26%)</title><rect x="90.2222%" y="101" width="3.2593%" height="15" fill="rgb(228,167,24)" fg:x="3045" fg:w="110"/><text x="90.4722%" y="111.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;(ai::function::Symbol,ai::function::Symbol)&gt;&gt; (80 samples, 2.37%)</title><rect x="91.1111%" y="85" width="2.3704%" height="15" fill="rgb(228,143,12)" fg:x="3075" fg:w="80"/><text x="91.3611%" y="95.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;(ai::function::Symbol,ai::function::Symbol)&gt; (80 samples, 2.37%)</title><rect x="91.1111%" y="69" width="2.3704%" height="15" fill="rgb(249,149,8)" fg:x="3075" fg:w="80"/><text x="91.3611%" y="79.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;ai::function::Symbol&gt; (71 samples, 2.10%)</title><rect x="91.3778%" y="53" width="2.1037%" height="15" fill="rgb(243,35,44)" fg:x="3084" fg:w="71"/><text x="91.6278%" y="63.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;ai::function::Function&gt; (5 samples, 0.15%)</title><rect x="93.3333%" y="37" width="0.1481%" height="15" fill="rgb(246,89,9)" fg:x="3150" fg:w="5"/><text x="93.5833%" y="47.50"></text></g><g><title>ai::network::Network::compute (1 samples, 0.03%)</title><rect x="93.4815%" y="709" width="0.0296%" height="15" fill="rgb(233,213,13)" fg:x="3155" fg:w="1"/><text x="93.7315%" y="719.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&lt;&amp;f64&gt;&gt;::mul (1 samples, 0.03%)</title><rect x="93.4815%" y="693" width="0.0296%" height="15" fill="rgb(233,141,41)" fg:x="3155" fg:w="1"/><text x="93.7315%" y="703.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (1 samples, 0.03%)</title><rect x="93.4815%" y="677" width="0.0296%" height="15" fill="rgb(239,167,4)" fg:x="3155" fg:w="1"/><text x="93.7315%" y="687.50"></text></g><g><title>ai::network::Network::new::{{closure}} (2 samples, 0.06%)</title><rect x="93.5111%" y="693" width="0.0593%" height="15" fill="rgb(209,217,16)" fg:x="3156" fg:w="2"/><text x="93.7611%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.06%)</title><rect x="93.5111%" y="677" width="0.0593%" height="15" fill="rgb(219,88,35)" fg:x="3156" fg:w="2"/><text x="93.7611%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.06%)</title><rect x="93.5111%" y="661" width="0.0593%" height="15" fill="rgb(220,193,23)" fg:x="3156" fg:w="2"/><text x="93.7611%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.06%)</title><rect x="93.5111%" y="645" width="0.0593%" height="15" fill="rgb(230,90,52)" fg:x="3156" fg:w="2"/><text x="93.7611%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.06%)</title><rect x="93.5111%" y="629" width="0.0593%" height="15" fill="rgb(252,106,19)" fg:x="3156" fg:w="2"/><text x="93.7611%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.06%)</title><rect x="93.5111%" y="613" width="0.0593%" height="15" fill="rgb(206,74,20)" fg:x="3156" fg:w="2"/><text x="93.7611%" y="623.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.06%)</title><rect x="93.5111%" y="597" width="0.0593%" height="15" fill="rgb(230,138,44)" fg:x="3156" fg:w="2"/><text x="93.7611%" y="607.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.06%)</title><rect x="93.5111%" y="581" width="0.0593%" height="15" fill="rgb(235,182,43)" fg:x="3156" fg:w="2"/><text x="93.7611%" y="591.50"></text></g><g><title>realloc (2 samples, 0.06%)</title><rect x="93.5111%" y="565" width="0.0593%" height="15" fill="rgb(242,16,51)" fg:x="3156" fg:w="2"/><text x="93.7611%" y="575.50"></text></g><g><title>[libc.so.6] (2 samples, 0.06%)</title><rect x="93.5111%" y="549" width="0.0593%" height="15" fill="rgb(248,9,4)" fg:x="3156" fg:w="2"/><text x="93.7611%" y="559.50"></text></g><g><title>[libc.so.6] (2 samples, 0.06%)</title><rect x="93.5111%" y="533" width="0.0593%" height="15" fill="rgb(210,31,22)" fg:x="3156" fg:w="2"/><text x="93.7611%" y="543.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="93.5407%" y="517" width="0.0296%" height="15" fill="rgb(239,54,39)" fg:x="3157" fg:w="1"/><text x="93.7907%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.06%)</title><rect x="93.5704%" y="693" width="0.0593%" height="15" fill="rgb(230,99,41)" fg:x="3158" fg:w="2"/><text x="93.8204%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.06%)</title><rect x="93.5704%" y="677" width="0.0593%" height="15" fill="rgb(253,106,12)" fg:x="3158" fg:w="2"/><text x="93.8204%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.06%)</title><rect x="93.5704%" y="661" width="0.0593%" height="15" fill="rgb(213,46,41)" fg:x="3158" fg:w="2"/><text x="93.8204%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.06%)</title><rect x="93.5704%" y="645" width="0.0593%" height="15" fill="rgb(215,133,35)" fg:x="3158" fg:w="2"/><text x="93.8204%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.06%)</title><rect x="93.5704%" y="629" width="0.0593%" height="15" fill="rgb(213,28,5)" fg:x="3158" fg:w="2"/><text x="93.8204%" y="639.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.06%)</title><rect x="93.5704%" y="613" width="0.0593%" height="15" fill="rgb(215,77,49)" fg:x="3158" fg:w="2"/><text x="93.8204%" y="623.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.06%)</title><rect x="93.5704%" y="597" width="0.0593%" height="15" fill="rgb(248,100,22)" fg:x="3158" fg:w="2"/><text x="93.8204%" y="607.50"></text></g><g><title>realloc (2 samples, 0.06%)</title><rect x="93.5704%" y="581" width="0.0593%" height="15" fill="rgb(208,67,9)" fg:x="3158" fg:w="2"/><text x="93.8204%" y="591.50"></text></g><g><title>[libc.so.6] (2 samples, 0.06%)</title><rect x="93.5704%" y="565" width="0.0593%" height="15" fill="rgb(219,133,21)" fg:x="3158" fg:w="2"/><text x="93.8204%" y="575.50"></text></g><g><title>[libc.so.6] (2 samples, 0.06%)</title><rect x="93.5704%" y="549" width="0.0593%" height="15" fill="rgb(246,46,29)" fg:x="3158" fg:w="2"/><text x="93.8204%" y="559.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.03%)</title><rect x="93.6296%" y="693" width="0.0296%" height="15" fill="rgb(246,185,52)" fg:x="3160" fg:w="1"/><text x="93.8796%" y="703.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.03%)</title><rect x="93.6296%" y="677" width="0.0296%" height="15" fill="rgb(252,136,11)" fg:x="3160" fg:w="1"/><text x="93.8796%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.03%)</title><rect x="93.6296%" y="661" width="0.0296%" height="15" fill="rgb(219,138,53)" fg:x="3160" fg:w="1"/><text x="93.8796%" y="671.50"></text></g><g><title>ai::network::Network::new (6 samples, 0.18%)</title><rect x="93.5111%" y="709" width="0.1778%" height="15" fill="rgb(211,51,23)" fg:x="3156" fg:w="6"/><text x="93.7611%" y="719.50"></text></g><g><title>rand::rng::Rng::gen_range (1 samples, 0.03%)</title><rect x="93.6593%" y="693" width="0.0296%" height="15" fill="rgb(247,221,28)" fg:x="3161" fg:w="1"/><text x="93.9093%" y="703.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (1 samples, 0.03%)</title><rect x="93.6593%" y="677" width="0.0296%" height="15" fill="rgb(251,222,45)" fg:x="3161" fg:w="1"/><text x="93.9093%" y="687.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformFloat&lt;f64&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (1 samples, 0.03%)</title><rect x="93.6593%" y="661" width="0.0296%" height="15" fill="rgb(217,162,53)" fg:x="3161" fg:w="1"/><text x="93.9093%" y="671.50"></text></g><g><title>&lt;f64 as rand::distributions::utils::FloatSIMDUtils&gt;::all_lt (1 samples, 0.03%)</title><rect x="93.6593%" y="645" width="0.0296%" height="15" fill="rgb(229,93,14)" fg:x="3161" fg:w="1"/><text x="93.9093%" y="655.50"></text></g><g><title>[libc.so.6] (46 samples, 1.36%)</title><rect x="98.5778%" y="453" width="1.3630%" height="15" fill="rgb(209,67,49)" fg:x="3327" fg:w="46"/><text x="98.8278%" y="463.50"></text></g><g><title>std::panic::catch_unwind (3,318 samples, 98.31%)</title><rect x="1.6593%" y="837" width="98.3111%" height="15" fill="rgb(213,87,29)" fg:x="56" fg:w="3318"/><text x="1.9093%" y="847.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,318 samples, 98.31%)</title><rect x="1.6593%" y="821" width="98.3111%" height="15" fill="rgb(205,151,52)" fg:x="56" fg:w="3318"/><text x="1.9093%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,318 samples, 98.31%)</title><rect x="1.6593%" y="805" width="98.3111%" height="15" fill="rgb(253,215,39)" fg:x="56" fg:w="3318"/><text x="1.9093%" y="815.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3,318 samples, 98.31%)</title><rect x="1.6593%" y="789" width="98.3111%" height="15" fill="rgb(221,220,41)" fg:x="56" fg:w="3318"/><text x="1.9093%" y="799.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (3,318 samples, 98.31%)</title><rect x="1.6593%" y="773" width="98.3111%" height="15" fill="rgb(218,133,21)" fg:x="56" fg:w="3318"/><text x="1.9093%" y="783.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,318 samples, 98.31%)</title><rect x="1.6593%" y="757" width="98.3111%" height="15" fill="rgb(221,193,43)" fg:x="56" fg:w="3318"/><text x="1.9093%" y="767.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (3,318 samples, 98.31%)</title><rect x="1.6593%" y="741" width="98.3111%" height="15" fill="rgb(240,128,52)" fg:x="56" fg:w="3318"/><text x="1.9093%" y="751.50">core::ops::function::FnOnce::call_once</text></g><g><title>ai::main (3,318 samples, 98.31%)</title><rect x="1.6593%" y="725" width="98.3111%" height="15" fill="rgb(253,114,12)" fg:x="56" fg:w="3318"/><text x="1.9093%" y="735.50">ai::main</text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::save (212 samples, 6.28%)</title><rect x="93.6889%" y="709" width="6.2815%" height="15" fill="rgb(215,223,47)" fg:x="3162" fg:w="212"/><text x="93.9389%" y="719.50">image::b..</text></g><g><title>image::dynimage::save_buffer (212 samples, 6.28%)</title><rect x="93.6889%" y="693" width="6.2815%" height="15" fill="rgb(248,225,23)" fg:x="3162" fg:w="212"/><text x="93.9389%" y="703.50">image::d..</text></g><g><title>image::io::free_functions::save_buffer_impl (212 samples, 6.28%)</title><rect x="93.6889%" y="677" width="6.2815%" height="15" fill="rgb(250,108,0)" fg:x="3162" fg:w="212"/><text x="93.9389%" y="687.50">image::i..</text></g><g><title>image::io::free_functions::save_buffer_with_format_impl (212 samples, 6.28%)</title><rect x="93.6889%" y="661" width="6.2815%" height="15" fill="rgb(228,208,7)" fg:x="3162" fg:w="212"/><text x="93.9389%" y="671.50">image::i..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::new (212 samples, 6.28%)</title><rect x="93.6889%" y="645" width="6.2815%" height="15" fill="rgb(244,45,10)" fg:x="3162" fg:w="212"/><text x="93.9389%" y="655.50">std::io:..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::with_capacity (212 samples, 6.28%)</title><rect x="93.6889%" y="629" width="6.2815%" height="15" fill="rgb(207,125,25)" fg:x="3162" fg:w="212"/><text x="93.9389%" y="639.50">std::io:..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (212 samples, 6.28%)</title><rect x="93.6889%" y="613" width="6.2815%" height="15" fill="rgb(210,195,18)" fg:x="3162" fg:w="212"/><text x="93.9389%" y="623.50">alloc::v..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (212 samples, 6.28%)</title><rect x="93.6889%" y="597" width="6.2815%" height="15" fill="rgb(249,80,12)" fg:x="3162" fg:w="212"/><text x="93.9389%" y="607.50">alloc::v..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (212 samples, 6.28%)</title><rect x="93.6889%" y="581" width="6.2815%" height="15" fill="rgb(221,65,9)" fg:x="3162" fg:w="212"/><text x="93.9389%" y="591.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (212 samples, 6.28%)</title><rect x="93.6889%" y="565" width="6.2815%" height="15" fill="rgb(235,49,36)" fg:x="3162" fg:w="212"/><text x="93.9389%" y="575.50">alloc::r..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (212 samples, 6.28%)</title><rect x="93.6889%" y="549" width="6.2815%" height="15" fill="rgb(225,32,20)" fg:x="3162" fg:w="212"/><text x="93.9389%" y="559.50">&lt;alloc::..</text></g><g><title>alloc::alloc::Global::alloc_impl (212 samples, 6.28%)</title><rect x="93.6889%" y="533" width="6.2815%" height="15" fill="rgb(215,141,46)" fg:x="3162" fg:w="212"/><text x="93.9389%" y="543.50">alloc::a..</text></g><g><title>alloc::alloc::alloc (212 samples, 6.28%)</title><rect x="93.6889%" y="517" width="6.2815%" height="15" fill="rgb(250,160,47)" fg:x="3162" fg:w="212"/><text x="93.9389%" y="527.50">alloc::a..</text></g><g><title>malloc (212 samples, 6.28%)</title><rect x="93.6889%" y="501" width="6.2815%" height="15" fill="rgb(216,222,40)" fg:x="3162" fg:w="212"/><text x="93.9389%" y="511.50">malloc</text></g><g><title>[libc.so.6] (212 samples, 6.28%)</title><rect x="93.6889%" y="485" width="6.2815%" height="15" fill="rgb(234,217,39)" fg:x="3162" fg:w="212"/><text x="93.9389%" y="495.50">[libc.so..</text></g><g><title>[libc.so.6] (212 samples, 6.28%)</title><rect x="93.6889%" y="469" width="6.2815%" height="15" fill="rgb(207,178,40)" fg:x="3162" fg:w="212"/><text x="93.9389%" y="479.50">[libc.so..</text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="99.9407%" y="453" width="0.0296%" height="15" fill="rgb(221,136,13)" fg:x="3373" fg:w="1"/><text x="100.1907%" y="463.50"></text></g><g><title>all (3,375 samples, 100%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(249,199,10)" fg:x="0" fg:w="3375"/><text x="0.2500%" y="1023.50"></text></g><g><title>ai (3,375 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(249,222,13)" fg:x="0" fg:w="3375"/><text x="0.2500%" y="1007.50">ai</text></g><g><title>_start (3,319 samples, 98.34%)</title><rect x="1.6593%" y="981" width="98.3407%" height="15" fill="rgb(244,185,38)" fg:x="56" fg:w="3319"/><text x="1.9093%" y="991.50">_start</text></g><g><title>__libc_start_main (3,319 samples, 98.34%)</title><rect x="1.6593%" y="965" width="98.3407%" height="15" fill="rgb(236,202,9)" fg:x="56" fg:w="3319"/><text x="1.9093%" y="975.50">__libc_start_main</text></g><g><title>[libc.so.6] (3,319 samples, 98.34%)</title><rect x="1.6593%" y="949" width="98.3407%" height="15" fill="rgb(250,229,37)" fg:x="56" fg:w="3319"/><text x="1.9093%" y="959.50">[libc.so.6]</text></g><g><title>main (3,319 samples, 98.34%)</title><rect x="1.6593%" y="933" width="98.3407%" height="15" fill="rgb(206,174,23)" fg:x="56" fg:w="3319"/><text x="1.9093%" y="943.50">main</text></g><g><title>std::rt::lang_start_internal (3,319 samples, 98.34%)</title><rect x="1.6593%" y="917" width="98.3407%" height="15" fill="rgb(211,33,43)" fg:x="56" fg:w="3319"/><text x="1.9093%" y="927.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (3,319 samples, 98.34%)</title><rect x="1.6593%" y="901" width="98.3407%" height="15" fill="rgb(245,58,50)" fg:x="56" fg:w="3319"/><text x="1.9093%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,319 samples, 98.34%)</title><rect x="1.6593%" y="885" width="98.3407%" height="15" fill="rgb(244,68,36)" fg:x="56" fg:w="3319"/><text x="1.9093%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,319 samples, 98.34%)</title><rect x="1.6593%" y="869" width="98.3407%" height="15" fill="rgb(232,229,15)" fg:x="56" fg:w="3319"/><text x="1.9093%" y="879.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (3,319 samples, 98.34%)</title><rect x="1.6593%" y="853" width="98.3407%" height="15" fill="rgb(254,30,23)" fg:x="56" fg:w="3319"/><text x="1.9093%" y="863.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::init (1 samples, 0.03%)</title><rect x="99.9704%" y="837" width="0.0296%" height="15" fill="rgb(235,160,14)" fg:x="3374" fg:w="1"/><text x="100.2204%" y="847.50"></text></g><g><title>std::sys::pal::unix::init (1 samples, 0.03%)</title><rect x="99.9704%" y="821" width="0.0296%" height="15" fill="rgb(212,155,44)" fg:x="3374" fg:w="1"/><text x="100.2204%" y="831.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::init (1 samples, 0.03%)</title><rect x="99.9704%" y="805" width="0.0296%" height="15" fill="rgb(226,2,50)" fg:x="3374" fg:w="1"/><text x="100.2204%" y="815.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::install_main_guard (1 samples, 0.03%)</title><rect x="99.9704%" y="789" width="0.0296%" height="15" fill="rgb(234,177,6)" fg:x="3374" fg:w="1"/><text x="100.2204%" y="799.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack_start_aligned (1 samples, 0.03%)</title><rect x="99.9704%" y="773" width="0.0296%" height="15" fill="rgb(217,24,9)" fg:x="3374" fg:w="1"/><text x="100.2204%" y="783.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack_start (1 samples, 0.03%)</title><rect x="99.9704%" y="757" width="0.0296%" height="15" fill="rgb(220,13,46)" fg:x="3374" fg:w="1"/><text x="100.2204%" y="767.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.03%)</title><rect x="99.9704%" y="741" width="0.0296%" height="15" fill="rgb(239,221,27)" fg:x="3374" fg:w="1"/><text x="100.2204%" y="751.50"></text></g><g><title>_IO_fclose (1 samples, 0.03%)</title><rect x="99.9704%" y="725" width="0.0296%" height="15" fill="rgb(222,198,25)" fg:x="3374" fg:w="1"/><text x="100.2204%" y="735.50"></text></g><g><title>_IO_file_close_it (1 samples, 0.03%)</title><rect x="99.9704%" y="709" width="0.0296%" height="15" fill="rgb(211,99,13)" fg:x="3374" fg:w="1"/><text x="100.2204%" y="719.50"></text></g><g><title>_IO_setb (1 samples, 0.03%)</title><rect x="99.9704%" y="693" width="0.0296%" height="15" fill="rgb(232,111,31)" fg:x="3374" fg:w="1"/><text x="100.2204%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.03%)</title><rect x="99.9704%" y="677" width="0.0296%" height="15" fill="rgb(245,82,37)" fg:x="3374" fg:w="1"/><text x="100.2204%" y="687.50"></text></g></svg></svg>